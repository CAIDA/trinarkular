#!/usr/bin/env python

import argparse
import gzip
import ijson.backends.yajl2 as ijson
import simplejson as json
import sys

def dump_slash24(slash24, obj, pretty_print):
    if pretty_print:
        print "  \"" + slash24 + "\": ", json.dumps(obj, indent=2)
    else:
        sys.stdout.write("\"" + slash24 + "\":" +
                         json.dumps(obj, separators=(',',':')))

def process_json(fd, blacklist_24s, num_blocks, meta_filters, pretty_print):
    block_count = 0
    slash24 = None

    if blacklist_24s:
        sys.stderr.write("Using blacklist: %s\n" % blacklist_24s)
    else:
        blacklist_24s = []

    if pretty_print:
        print '{'
    else:
        sys.stdout.write('{')

    builder = ijson.common.ObjectBuilder()
    for prefix, event, value in ijson.parse(fd):
        # new object encountered, load the previous one
        if event == "map_key" and prefix == "":
            if slash24:
                obj = builder.value
                if (slash24 not in blacklist_24s) and \
                   (not meta_filters or \
                    any(i in meta_filters for i in obj['meta'])):
                    if block_count > 0:
                        if pretty_print:
                            print ","
                        else:
                            sys.stdout.write(",")
                    dump_slash24(slash24, obj, pretty_print)
                    block_count += 1
                if num_blocks is not None and block_count >= num_blocks:
                    print '}'
                    return block_count
            slash24 = value
            builder = ijson.common.ObjectBuilder()
        builder.event(event, value)

    # load the last object (code replicated from above)
    obj = builder.value
    if not meta_filters or any(i in meta_filters for i in obj['meta']):
        if block_count > 0:
            if pretty_print:
                print ","
            else:
                sys.stdout.write(",")
        dump_slash24(slash24, obj, pretty_print)
        block_count += 1

    print '}'
    return block_count

def filter_probelist(filename=sys.stdin,
                     blacklist_file=None,
                     num_blocks=None,
                     meta_filters=None,
                     pretty_print=False):

    # read the blacklist into a list
    if blacklist_file:
        with open(blacklist_file, 'r') as f:
            blacklist_24s = [line.strip() for line in f.readlines()]
    else:
        blacklist_24s = None

    if filename.endswith('.gz'):
        with gzip.open(filename, 'rb') as fd:
            block_count = process_json(fd, blacklist_24s, num_blocks,
                                       meta_filters, pretty_print)
    else:
        with open(filename, 'rb') as fd:
            block_count = process_json(fd, num_blocks, blacklist_24s,
                                       meta_filters, pretty_print)

    return block_count



if __name__ == "__main__":
    cliParser = argparse.ArgumentParser(description="""
    Filters a probelist based on given parameters
    """)

    cliParser.add_argument('-b',  '--blacklist',
                           nargs='?', required=True,
                           help='Path to file containing blacklisted /24s')

    cliParser.add_argument('-f',  '--probelist',
                           nargs='?', required=True,
                           help='Path to the probelist JSON file')

    cliParser.add_argument('-n',  '--num-blocks',
                           nargs='?', type=int,
                           help='Max number of blocks to load (total)')

    cliParser.add_argument('-m',  '--filter-meta',
                           nargs='*',
                           help='Include only /24s with the given meta string')

    cliParser.add_argument('-p',  '--pretty-print',
                           action='store_true',
                           help='Output pretty-printed JSON')

    opts = vars(cliParser.parse_args())

    sys.stderr.write("Processing " + opts['probelist'] + " \n")

    cnt = filter_probelist(filename=opts['probelist'],
                           num_blocks=opts['num_blocks'],
                           blacklist_file=opts['blacklist'],
                           meta_filters=opts['filter_meta'],
                           pretty_print=opts['pretty_print'])

    sys.stderr.write("DONE: Loaded " + str(cnt) + " blocks\n")
